/*
   Library in grol for discord bot.
*/

discord = {
	"actionRow": elems => {
		{
		"type": 1,
		"components": elems
		}
	},
	"button": (label, style, custom_id) => {
		{
			"type": 2,
			"label": label,
			"style": style,
			"custom_id": custom_id
		}
	},
	"buttonStyle" : {
		"primary": 1,
		"secondary": 2,
		"success": 3,
		"danger": 4,
		"link": 5
	},
	"interaction" : {
		"update_message" : 7
	}
}

func discordExampleMessage(){
	msg= {
	  "content": "A test...",
	  "components":	[discord.actionRow([
				discord.button("Option 1", discord.buttonStyle.primary, "option_1"),
				discord.button("Option 2", discord.buttonStyle.secondary, "option_2")
	  ])]
	}
	ChannelMessageSendComplex(msg) // returns the msg id
	// error("error test")
}

// Just an example, real code should dispatch based on the id etc.
func discordInteraction(msgId, userId, map) {
	clicked = map.custom_id
	InteractionRespond({"type": discord.interaction.update_message, "data": {"content": clicked + " clicked by <@" + userId + ">"}})
}

// tic-tac-toe example

// f argument takes the element and the index
func walk(f, a) {
	(f,a,i) => {
		if (len(a)==0) {
			[]
		} else {
			[f(first(a),i)]+self(f,rest(a),i+1)
		}
	}(f,a,0)
}

func sendTicTacToeBoard(board) {
	components = walk((row,i) => {discord.actionRow(
					walk((cell,j) => {
						if cell == "" {
							cell = "\u200B" // zero width space
						}
					discord.button(cell, discord.buttonStyle.secondary, sprintf("cell_%d_%d", i, j))
				}, row))}, board)
	msg = {
		"content":    "Tic-Tac-Toe",
		"components": components
	}
	ChannelMessageSendComplex(msg)
}

sampleBoard = [["","",""],["","X",""],["","O","X"]]


// Result of eval of this file is logged by bot.go Run(). confirm we reached the end without error.
print("Imported discord grol library ok")
