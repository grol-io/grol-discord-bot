/*
   Library in grol for discord bot.
*/

discord = {
	"actionRow": elems => {
		{
		"type": 1,
		"components": elems
		}
	},
	"button": (label, style, custom_id) => {
		{
			"type": 2,
			"label": label,
			"style": style,
			"custom_id": custom_id
		}
	},
	"buttonStyle" : {
		"primary": 1,
		"secondary": 2,
		"success": 3,
		"danger": 4,
		"link": 5
	},
	"interaction" : {
		"update_message" : 7
	}
}

// tic-tac-toe example
func discordInteraction(state, userId, map) {
	if state == nil {
		state = {
			"board": tictactoe.empty_board,
			"next": "X",
			"end": nil,
			"turn": 0
		}
	}
	clicked = map.custom_id
	if clicked == "reset" {
		InteractionRespond({
			"type": discord.interaction.update_message,
			"data": {"content": "<@" + userId + "> has reset the board", "components": tictactoe.boardToComponents(tictactoe.empty_board,-1,-1)}})
		return nil // clear state
	}
	if state.end != nil || state.turn >= 9 {
		InteractionRespond({"type": discord.interaction.update_message, "data": {"content": "Game is over <@" + userId + ">"}})
		return state
	}
	state.turn = state.turn + 1 // no ++ on map/indexes yet.
	tag = "<@" + userId + ">"
	if clicked == "play" {
		move = tictactoe.play(state.board, state.next)
		log("Move", move)
		i = move[0]
		j = move[1]
		clicked = str(i+1) + "," + str(j+1)
		tag = "Grol"
	} else {
		pair = split(clicked, ",")
		i=int(pair[0])-1
		j=int(pair[1])-1
	}
	if state.board[i][j] != "" {
		InteractionRespond({"type": discord.interaction.update_message, "data": {"content": clicked + " is already occupied"}})
		return state
	}
	board = state.board
	row = board[i]
	row[j] = state.next
	board[i] = row
	state.board = board
	state.next = tictactoe.next(state.next)
	state.end = tictactoe.endGame(board)
	if state.end != nil{
		clicked = clicked + ": " + state.end + " wins!"
	}
	InteractionRespond({
		"type": discord.interaction.update_message,
		"data": {"content": tag + " played " + clicked, "components": tictactoe.boardToComponents(state.board,i,j)}
	})
	state
}

state = {}

// f argument takes the element and the index
func walk(f, a) {
	(f,a,i) => {
		if (len(a)==0) {
			[]
		} else {
			[f(first(a),i)]+self(f,rest(a),i+1)
		}
	}(f,a,0)
}

tictactoe = {
  "empty_board": [["","",""],["","",""],["","",""]],
  "boardToComponents": (board, hi, hj) => {
	walk((row,i) => {discord.actionRow(
		walk((cell,j) => {
		   if cell == "" {
			   cell = "\u200B" // zero width space
		   }
		   style = discord.buttonStyle.secondary
		   if i == hi && j == hj {
			   style = discord.buttonStyle.primary
		   }
		   discord.button(cell, style, sprintf("%d,%d", i+1, j+1))
		}, row))}, board) +
		[discord.actionRow([discord.button("Grol Play",discord.buttonStyle.success,"play"), discord.button("Reset", discord.buttonStyle.danger, "reset")])]
  },
  "sendBoard": board => {
	msg = {
		"content":    "Tic-Tac-Toe",
		"components": tictactoe.boardToComponents(board, -1, -1)
	}
	ChannelMessageSendComplex(msg)
    },
  "endGame": board => {
	// check for win
	r = for(3, (i,r) => {
		if r!=nil {
			r
		} else if board[i][0] != "" && board[i][0] == board[i][1] && board[i][1] == board[i][2] {
			board[i][0]
		} else if board[0][i] != "" && board[0][i] == board[1][i] && board[1][i] == board[2][i] {
			board[0][i]
		} else {
			nil
		}
	}, nil)
	if r!=nil {
		r
	} else if board[0][0] != "" && board[0][0] == board[1][1] && board[1][1] == board[2][2] {
		board[0][0]
	} else if board[0][2] != "" && board[0][2] == board[1][1] && board[1][1] == board[2][0] {
		board[0][2]
	} else {
		nil
	}
  },
  "next": cur => {
	if cur == "X" {
		"O"
	} else {
		"X"
	}
  },
  "play": (board, next) => {
	wmove = max(walk((row,i) => max(walk((cell,j) => {
		if cell == "" {
			row[j] = next
			board[i] = row
			if tictactoe.endGame(board) != nil {
				log("Win by", next, "at", i, j)
				return [i,j]
			}
			row[j] = tictactoe.next(next)
			board[i] = row
			if tictactoe.endGame(board) != nil {
				log("Loss by", next, "at", i, j)
				return [i,j]
			}
		}
		nil
	}, row)), board))
	if wmove != nil {
		wmove
	} else {
		// try middle move
		if board[1][1] == "" {
			[1,1]
		} else if board[0][0] == "" {
			[0,0]
		} else if board[0][2] == "" {
			[0,2]
		} else if board[2][0] == "" {
			[2,0]
		} else if board[2][2] == "" {
			[2,2]
		} else if board[0][1] == "" {
			[0,1]
		} else if board[1][0] == "" {
			[1,0]
		} else if board[1][2] == "" {
			[1,2]
		} else {
			[2,1]
		}
    }
  }
}

func TicTacToe() {
	tictactoe.sendBoard(tictactoe.empty_board)
}

// ------- Misc stuff ----

func layout(){
	println("Simple project layout [github.com/go-standard/project-layout](<https://github.com/go-standard/project-layout#project-layout>) - simple is good!")
}

func str(x) {sprintf("%v", x)}

func for(n, f, start) {
    (i,f,x) => { // internal lambda with the index param and intermediate result
		if (i>=n) {
			return x
		}
		r = f(i,x)
       self(i+1, f,r)
    }(0,f,start)
}

// Result of eval of this file is logged by bot.go Run(). confirm we reached the end without error.
print("Imported discord grol library ok")
